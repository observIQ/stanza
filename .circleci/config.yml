---
version: 2.1

orbs:
  win: circleci/windows@2.4.0
  gcp-cli: circleci/gcp-cli@2.2.0
  codecov: codecov/codecov@1.0.2
  pr-comment: benjlevesque/pr-comment@0.1.4

executors:
  golang:
    docker:
      - image: circleci/golang:1.16
  mac:
    macos:
      xcode: 11.4.1

jobs:

  build:
    executor: golang
    steps:
      - checkout
      - run:
          name: Build
          command: |
            export VERSION="$CIRCLE_TAG"
            export GIT_TAG="$CIRCLE_TAG"
            make install-tools
            make build-all
            sed "s|/releases/latest/download|/releases/download/$VERSION|g" < ./scripts/unix-install.sh > ./artifacts/unix-install.sh
            sed "s|/releases/latest/download|/releases/download/$VERSION|g" < ./scripts/windows-install.ps1 > ./artifacts/windows-install.ps1
      - persist_to_workspace:
          root: ./artifacts
          paths:
            - "*"
  build-docker:
    resource_class: large
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Install Docker buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            curl -sSL -o ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.6.2/buildx-v0.6.2.linux-amd64
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run:
          name: Enable experimental Docker features
          command: echo 'export DOCKER_CLI_EXPERIMENTAL="enabled"' >> $BASH_ENV
      - run:
          name: Create Docker context
          command: docker context create tls-environment
      - run:
          name: Initialize Docker buildx
          command: docker buildx install
      - run:
          name: Start multiarch/qemu-user-static container
          command: >
            docker run --rm --privileged
            multiarch/qemu-user-static:5.2.0-2
            --reset -p yes
      - run:
          name: Remove buildx multiarch container in case it exists
          command: docker rm -f buildx_buildkit_docker-multiarch0 || continue
      - run:
          name: Create docker-multiarch builder
          command: >
            docker buildx create --name docker-multiarch tls-environment
            --platform linux/386,linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/mips64le,linux/ppc64le,linux/riscv64,linux/s390x
      - run:
          name: Inspect & bootstrap docker-multiarch builder
          command: docker buildx inspect --builder docker-multiarch --bootstrap
      - run:
          name: Set docker-multiarch as default builder
          command: docker buildx use docker-multiarch
      - run:
          name: "Build container image"
          no_output_timeout: 45m
          command: |
            docker_tag=$(echo ${CIRCLE_TAG} | cut -b2- )
            docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_TOKEN}
            export DOCKER_CLI_EXPERIMENTAL=enabled

            docker buildx build \
              --progress=plain \
              --platform linux/amd64,linux/arm64 \
              --tag observiq/stanza:latest \
              .

  fetch-plugins:
    executor: golang
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Download Plugins Tarball
          command: curl -fL https://github.com/observiq/stanza-plugins/releases/latest/download/stanza-plugins.tar.gz -o ./artifacts/stanza-plugins.tar.gz
      - run:
          name: Download Plugins Zip
          command: curl -fL https://github.com/observiq/stanza-plugins/releases/latest/download/stanza-plugins.zip -o ./artifacts/stanza-plugins.zip
      - run:
          name: Download Version File
          command: curl -fL https://github.com/observiq/stanza-plugins/releases/latest/download/version.json -o ./artifacts/version.json
      - persist_to_workspace:
          root: ./artifacts
          paths:
            - "*"

  wait-for-validation:
    executor: golang
    resource_class: small
    steps:
      - run: echo 'Validation Jobs Complete'

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GHI_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ./artifacts/

  publish-docker-release:
    # building amd64 + arm64 is compute intensive
    resource_class: 2xlarge
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Install Docker buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            curl -sSL -o ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.6.2/buildx-v0.6.2.linux-amd64
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - run:
          name: Enable experimental Docker features
          command: echo 'export DOCKER_CLI_EXPERIMENTAL="enabled"' >> $BASH_ENV
      - run:
          name: Create Docker context
          command: docker context create tls-environment
      - run:
          name: Initialize Docker buildx
          command: docker buildx install
      - run:
          name: Start multiarch/qemu-user-static container
          command: >
            docker run --rm --privileged
            multiarch/qemu-user-static:5.2.0-2
            --reset -p yes
      - run:
          name: Remove buildx multiarch container in case it exists
          command: docker rm -f buildx_buildkit_docker-multiarch0 || continue
      - run:
          name: Create docker-multiarch builder
          command: >
            docker buildx create --name docker-multiarch tls-environment
            --platform linux/386,linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/mips64le,linux/ppc64le,linux/riscv64,linux/s390x
      - run:
          name: Inspect & bootstrap docker-multiarch builder
          command: docker buildx inspect --builder docker-multiarch --bootstrap
      - run:
          name: Set docker-multiarch as default builder
          command: docker buildx use docker-multiarch
      - run:
          name: "Publish Release on Docker Hub"
          no_output_timeout: 45m
          command: |
            docker_tag=$(echo ${CIRCLE_TAG} | cut -b2- )
            docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_TOKEN}
            export DOCKER_CLI_EXPERIMENTAL=enabled

            docker buildx build \
              --progress=plain \
              --platform linux/amd64,linux/arm64 \
              --tag observiq/stanza:${docker_tag} \
              --tag observiq/stanza:latest \
              --push \
              .

  test-linux:
    executor: golang
    resource_class: large

    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: make test
      - codecov/upload:
          file: '**/coverage.txt'

  test-linux-arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.large

    steps:
      - checkout
      - run:
          name: Download golang
          command: curl -SL https://golang.org/dl/go1.16.3.linux-arm64.tar.gz -O
      - run:
          name: Extract golang
          command: tar -C ~ -xzf go1.16.3.linux-arm64.tar.gz
      - run:
          name: Add Golang to Path
          command: echo 'export PATH=~/go/bin:$PATH' >> $BASH_ENV
      - run:
          # call go vet and go test directly, as `make test` will attempt
          # to run with GOOS=windows GOARCH=arm64, which is an invalid combination
          name: Run Unit Tests
          command: go vet ./... && go test -race -coverprofile coverage.txt -coverpkg ./... ./...
      - codecov/upload:
          file: '**/coverage.txt'

  test-macos:
    executor: mac

    steps:
      - checkout
      - run:
          name: Download golang
          command: curl -SL https://golang.org/dl/go1.16.3.darwin-amd64.tar.gz -O
      - run:
          name: Extract golang
          command: tar -C ~ -xzf go1.16.3.darwin-amd64.tar.gz
      - run:
          name: Add Golang to Path
          command: echo 'export PATH=~/go/bin:$PATH' >> $BASH_ENV
      - run:
          name: Run Unit Tests
          command: make test

  test-windows:
    executor: win/default

    steps:
      - checkout
      - run:
          name: Upgrade Golang
          shell: powershell.exe
          command: choco upgrade golang --version=1.16
      - run:
          name: Install GCC
          shell: powershell.exe
          command: choco install mingw
      - run:
          name: Get Dependencies
          shell: powershell.exe
          command: go get -v -t -d ./...
      - run:
          name: Unit Tests
          shell: powershell.exe
          command: (Get-Childitem -Include go.mod -Recurse) | ForEach-Object { cd (Split-Path $_ -Parent); go test -race ./...; if ($LastExitCode -gt 0) { exit $LastExitCode } }

  run-benchmark:
    parameters:
      instance:
        type: string
      files:
        type: integer
      rate:
        type: integer
      duration:
        type: string
        default: 60s
      profile:
        type: boolean
        default: false
      image:
        type: string
        default: centos-7-v20200603
      image-project:
        type: string
        default: centos-cloud
      machine-type:
        type: string
        default: n1-highcpu-4
      boot-disk-size:
        type: string
        default: 128GB

    docker:
      - image: circleci/golang:1.16
    resource_class: small

    steps:
      - checkout
      - run:
          name: Setup Workspace
          command: mkdir {bin,out,tmp}
      - run:
          name: Build Stanza Agent
          command: (cd ./cmd/stanza && go build -v -o ../../bin/stanza ./)
      - run:
          name: Build Log Bench
          command: GOPROXY=direct go get github.com/observiq/amazon-log-agent-benchmark-tool/cmd/logbench/ &&
            go build -o ./bin/logbench github.com/observiq/amazon-log-agent-benchmark-tool/cmd/logbench/

      - gcp-cli/install:
          version: "354.0.0"
      - gcp-cli/initialize:
          gcloud-service-key: SERVICE_ACCOUNT
          google-project-id: PROJECT
          google-compute-zone: ZONE

      - run:
          name: Setup ssh for gcloud
          command: |
            echo $GCLOUD_SSH_KEY | base64 --decode --ignore-garbage > ${HOME}/.ssh/key; chmod 0400 ${HOME}/.ssh/key;
            echo $GCLOUD_SSH_KEY_PUB | base64 --decode --ignore-garbage > ${HOME}/.ssh/key.pub; chmod 0600 ${HOME}/.ssh/key.pub;

      - run:
          name: Create Benchmark VM
          command: >
            gcloud compute instances create --verbosity=error << parameters.instance >> \
              --scopes="https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/compute" \
              --metadata-from-file=startup-script=./.circleci/scripts/startup-ttl.sh \
              --image=<< parameters.image >> --image-project=<< parameters.image-project >> \
              --machine-type=<< parameters.machine-type >> --boot-disk-size=<< parameters.boot-disk-size >>
      - run:
          name: Wait for VM
          command: >
            until gcloud compute ssh << parameters.instance >> --ssh-key-file=~/.ssh/key --ssh-flag="-o LogLevel=QUIET" --verbosity=critical -- 'echo "Ready"'; do \
              echo "VM not ready. Waiting..."; \
            done

      - run:
          name: Setup VM Workspace
          command: gcloud compute ssh << parameters.instance >> --ssh-key-file=~/.ssh/key --ssh-flag="-o LogLevel=QUIET" -- 'mkdir -p ~/benchmark/out' &&
            gcloud compute scp --ssh-key-file=~/.ssh/key ./bin/stanza << parameters.instance >>:~/benchmark/ &&
            gcloud compute scp --ssh-key-file=~/.ssh/key ./bin/logbench << parameters.instance >>:~/benchmark/ &&
            gcloud compute scp --ssh-key-file=~/.ssh/key ./.circleci/testdata/benchmark.yaml << parameters.instance >>:~/benchmark/config.yaml &&
            gcloud compute ssh << parameters.instance >> --ssh-key-file=~/.ssh/key --ssh-flag="-o LogLevel=QUIET" -- 'chmod -R 777 ~/benchmark'

      - when:
          condition: << parameters.profile >>
          steps:
            - run:
                name: Run Benchmark
                command: >
                  gcloud compute ssh << parameters.instance >> --ssh-key-file=~/.ssh/key --ssh-flag="-o LogLevel=QUIET" -- \
                    '~/benchmark/logbench -log $(echo stream{1..<< parameters.files >>}.log | tr " " ,) \
                      -rate << parameters.rate >> -t << parameters.duration >> -r 30s -f 2s -out ~/benchmark/out/results.json \
                      ~/benchmark/stanza --database ~/benchmark/logagent.db --config ~/benchmark/config.yaml --cpu_profile ~/benchmark/out/cpu.pprof --cpu_profile_duration 30s \
                      --mem_profile ~/benchmark/out/mem.pprof --mem_profile_delay 10s > ~/benchmark/out/notes 2>&1'
      - unless:
          condition: << parameters.profile >>
          steps:
            - run:
                name: Run Benchmark
                command: >
                  gcloud compute ssh << parameters.instance >> --ssh-key-file=~/.ssh/key --ssh-flag="-o LogLevel=QUIET" -- \
                    '~/benchmark/logbench -log $(echo stream{1..<< parameters.files >>}.log | tr " " ,) \
                      -rate << parameters.rate >> -t << parameters.duration >> -r 30s -f 2s -out ~/benchmark/out/results.json \
                      ~/benchmark/stanza --database ~/benchmark/logagent.db --config ~/benchmark/config.yaml > ~/benchmark/out/notes 2>&1'

      - run:
          name: Retrieve Results
          command: gcloud compute scp --ssh-key-file=~/.ssh/key << parameters.instance >>:~/benchmark/out/* ./out/ && cat ./out/results.json

      - run:
          name: Stash Context
          command: >
            printf '{"github_pr_url":"%s","git_branch":"%s","git_commit_hash":"%s","circle_build_number":%s,"circle_job_name":"%s"}\n' \
              ${CIRCLE_PULL_REQUEST:-master} $CIRCLE_BRANCH $CIRCLE_SHA1 << pipeline.number >> $CIRCLE_JOB > tmp/context.json
      - run:
          name: Stash VM Details
          command: printf '{"create_command":"gcloud compute instances create ... --image=<< parameters.image >> --image-project=<< parameters.image-project >> --machine-type=<< parameters.machine-type >> --boot-disk-size=<< parameters.boot-disk-size >>"}\n' > tmp/command.json
      - run:
          name: Stash Benchmark Parameters
          command: printf '{"log_files":%s,"logs_per_second":%s,"profile":%s}\n' << parameters.files >> << parameters.rate >> << parameters.profile >> > tmp/parameters.json
      - run:
          name: Stash Benchmark Results
          command: cat out/results.json | jq 'del(.results[0].rate).results[0]' > tmp/stats.json
      - run:
          name: Combine Stashes
          command: jq -s '.[0] * .[1] * .[2] * .[3]' tmp/context.json tmp/command.json tmp/parameters.json tmp/stats.json > tmp/payload.json
      - run:
          name: Report Results
          command: >
            curl -f --header "secret: $RESULTS_SECRET" --header "Content-Type: application/json" --request POST --data-binary "@tmp/payload.json" $RESULTS_SERVICE

      - run:
          name: Delete VM
          command: gcloud compute instances delete --quiet << parameters.instance >>

      - store_artifacts:
          path: ./out

  report-benchmark:
    docker:
      - image: circleci/golang:1.16
    resource_class: small
    steps:
      - checkout
      - run:
          name: Setup Workspace
          command: mkdir tmp
      - run:
          name: Get Aggregated Results
          command: >
            curl -f --header "secret: $RESULTS_SECRET" --header "Content-Type: application/json" -o tmp/benchmark_results.json \
              "$RESULTS_SERVICE?command=diff&git_commit_hash=$CIRCLE_SHA1"
      - run:
          name: Write Table Labels
          command: printf "| Log Files | Logs / Second | CPU Avg (%%) | CPU Avg Δ (%%) | Memory Avg (MB) | Memory Avg Δ (MB) |\n| --- | --- | --- | --- | --- | --- |\n" > tmp/table.md
      - run:
          name: Convert Results to Rows
          command: printf "%s" $(cat tmp/benchmark_results.json | jq -r '.records | .[] | "| \(.log_files) | \(.logs_per_second) | \(.cpu_avg) | +\(.cpu_avg_diff) | \(.mem_avg) | +\(.mem_avg_diff) |"') | awk  '{gsub("\+-","-")};1' | awk  '{gsub("\|\|","|\n|")};1' >> tmp/table.md
      - run: cat tmp/table.md
      - pr-comment/pr-comment:
          comment: $(cat tmp/table.md)
          maxComments: 10

workflows:
  version: 2

  benchmark:
    jobs:
      - run-benchmark:
          name: f1-1000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f1-1000
          rate: 1000
          files: 1
      - run-benchmark:
          name: f1-5000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f1-5000
          rate: 5000
          files: 1
      - run-benchmark:
          name: f1-10000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f1-10000
          rate: 10000
          files: 1
      - run-benchmark:
          name: f1-50000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f1-50000
          rate: 50000
          files: 1
      - run-benchmark:
          name: f1-100000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f1-100000
          rate: 100000
          files: 1
      - run-benchmark:
          name: f10-100
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f10-100
          rate: 100
          files: 10
      - run-benchmark:
          name: f10-500
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f10-500
          rate: 500
          files: 10
      - run-benchmark:
          name: f10-1000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f10-1000
          rate: 1000
          files: 10
      - run-benchmark:
          name: f10-5000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f10-5000
          rate: 5000
          files: 10
      - run-benchmark:
          name: f10-10000
          context: logagent-benchmark
          instance: circleci-<< pipeline.number >>-f10-10000
          rate: 10000
          files: 10
      - report-benchmark:
          requires:
            - f1-1000
            - f1-5000
            - f1-10000
            - f1-50000
            - f1-100000
            - f10-100
            - f10-500
            - f10-1000
            - f10-5000
            - f10-10000
          filters:
            branches:
              ignore:
                - master

  test_build_release:
    jobs:
      - test-linux:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - test-linux-arm64:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - test-macos:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - test-windows:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - build:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - build-docker:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
          requires:
            - build
      - fetch-plugins:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - wait-for-validation:
          requires:
            - test-linux
            - test-linux-arm64
            - test-macos
            - test-windows
            - build
            - fetch-plugins
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - publish-github-release:
          requires:
            - wait-for-validation
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+.*/
      - publish-docker-release:
          requires:
            - wait-for-validation
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+.*/
