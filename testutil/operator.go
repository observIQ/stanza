package testutil

import (
	context "context"

	entry "github.com/open-telemetry/opentelemetry-log-collection/entry"
	mock "github.com/stretchr/testify/mock"

	operator "github.com/open-telemetry/opentelemetry-log-collection/operator"

	zap "go.uber.org/zap"
)

var _ operator.Operator = (*MockOperator)(nil)

// MockOperator is an autogenerated mock type for the MockOperator type
type MockOperator struct {
	mock.Mock
}

// ID returns the id of the operator.
func (o *MockOperator) ID() string {
	args := o.Called()
	return args.Get(0).(string)
}

// Type returns the type of the operator.
func (o *MockOperator) Type() string {
	args := o.Called()
	return args.Get(0).(string)
}

// Start will start the operator.
func (o *MockOperator) Start(p operator.Persister) error {
	args := o.Called(p)
	return args.Error(0)
}

// Stop will stop the operator.
func (o *MockOperator) Stop() error {
	args := o.Called()
	return args.Error(0)
}

// CanOutput indicates if the operator will output entries to other operators.
func (o *MockOperator) CanOutput() bool {
	args := o.Called()
	return args.Get(0).(bool)
}

// Outputs returns the list of connected outputs.
func (o *MockOperator) Outputs() []operator.Operator {
	args := o.Called()
	return args.Get(0).([]operator.Operator)
}

// GetOutputIDs returns the list of connected outputs.
func (o *MockOperator) GetOutputIDs() []string {
	args := o.Called()
	return args.Get(0).([]string)
}

// SetOutputs will set the connected outputs.
func (o *MockOperator) SetOutputs(operators []operator.Operator) error {
	args := o.Called(operators)
	return args.Error(0)
}

// SetOutputIDs will set the connected outputs' IDs.
func (o *MockOperator) SetOutputIDs(ids []string) {
	o.Called(ids)
}

// CanProcess indicates if the operator will process entries from other operators.
func (o *MockOperator) CanProcess() bool {
	args := o.Called()
	return args.Get(0).(bool)
}

// Process will process an entry from an operator.
func (o *MockOperator) Process(ctx context.Context, e *entry.Entry) error {
	args := o.Called(ctx, e)
	return args.Error(0)
}

// Logger returns the operator's logger
func (o *MockOperator) Logger() *zap.SugaredLogger {
	args := o.Called()
	return args.Get(0).(*zap.SugaredLogger)
}
