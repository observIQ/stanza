name: release

on:
  push:
    tags:
      - "v*"

jobs:
  build_msi:
    runs-on: windows-2019
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.21"
          check-latest: true
      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Build Windows Binary
        run: |
          make build-windows
          cp artifacts/stanza_windows_amd64 build/windows/stanza.exe
      - name: Get Latest stanza-plugins Release
        id: pluginsrelease
        run: echo "::set-output name=releasetag::$(curl -s https://api.github.com/repos/observiq/stanza-plugins/releases/latest | jq '.tag_name' | tr -d '"')"
      - name: Clone Plugins
        run: |
          git clone --depth 1 --branch ${{ steps.pluginsrelease.outputs.releasetag }} https://github.com/observIQ/stanza-plugins.git stanza-plugins
      - name: Copy Plugins to MSI Build Directory
        run: cp -r stanza-plugins/plugins build/windows/
      # HACK: Copy build directory to C drive to avoid this error:
      # "Rel: can't make D:/a/stanza/stanza/build/windows/stanza.exe relative to C:\Users\RUNNER~1\AppData\Local\Temp\go-msi502841497"
      - name: Copy Build Dir
        run: |
          cp -r build C:/build
          echo "C:/build/windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      # Installs go-msi, wix, and cinc.
      - name: Install Build and Test Tools
        run: 	|
          curl -L -o go-msi.exe https://github.com/observIQ/go-msi/releases/download/v2.0.0/go-msi.exe
          curl -L -o wix310-binaries.zip http://wixtoolset.org/downloads/v3.10.3.3007/wix310-binaries.zip
          unzip wix310-binaries.zip
        working-directory: C:/build/windows
      - name: "Release: Get Tag From Environment"
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: "Release: Build MSI from Tagged Release"
        run: go-msi.exe make -m stanza.msi --version ${{ steps.get-tag.outputs.tag }} --arch amd64
        working-directory: C:/build/windows
      - name: Install MSI
        run: msiexec.exe /qn /i stanza.msi
        working-directory: C:/build/windows
      - name: Install CINC (Inspec)
        run: . { iwr -useb https://omnitruck.cinc.sh/install.ps1 } | iex; install -project cinc-auditor -version 4
      - name: Run CINC (Inspec) Install Tests
        run: C:/cinc-project/cinc-auditor/bin/cinc-auditor.bat exec install.rb
        working-directory: C:/build/windows/test
      - name: Uninstall MSI
        run: |
          msiexec.exe /qn /x stanza.msi
          sleep 5
        working-directory: C:/build/windows
      - name: Run CINC (Inspec) Uninstall Tests
        run: C:/cinc-project/cinc-auditor/bin/cinc-auditor.bat exec uninstall.rb
        working-directory: C:/build/windows/test
      - name: "Release: Rename MSI to include version tag"
        run: mv stanza.msi stanza-${{ steps.get-tag.outputs.tag }}.msi
        working-directory: C:/build/windows
      - name: "Release: Archive code coverage results"
        uses: actions/upload-artifact@v2
        with:
          name: stanza-${{ steps.get-tag.outputs.tag }}.msi
          path: C:/build/windows/stanza-${{ steps.get-tag.outputs.tag }}.msi
          # Short lived because Go Releaser will upload the msi to a release (github release, gcs, etc)
          retention-days: 1
  release:
    runs-on: "ubuntu-20.04"
    needs: ["build_msi"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Required for goreleaser changelog to work properly
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.21"
          check-latest: true
      - name: "Get Tag From Environment"
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: Retrieve Windows MSI Installer
        uses: actions/download-artifact@v2
        with:
          name: stanza-${{ steps.get-tag.outputs.tag }}.msi
          path: stanza-${{ steps.get-tag.outputs.tag }}.msi
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: "v1.5.0"
          args: release --rm-dist
        env:
          # Default github token should have enough permissions to make a release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-push-container-image:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.21"
          check-latest: true
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # Org level secrets
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Get Tag From Environment
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: observiq/stanza:latest,observiq/stanza:${{ steps.get-tag.outputs.tag }}
