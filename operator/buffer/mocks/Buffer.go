// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	buffer "github.com/observiq/stanza/operator/buffer"

	entry "github.com/observiq/stanza/entry"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Buffer is an autogenerated mock type for the Buffer type
type Buffer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *Buffer) Add(_a0 context.Context, _a1 *entry.Entry) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entry.Entry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Buffer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MaxChunkDelay provides a mock function with given fields:
func (_m *Buffer) MaxChunkDelay() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MaxChunkSize provides a mock function with given fields:
func (_m *Buffer) MaxChunkSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Read provides a mock function with given fields: _a0
func (_m *Buffer) Read(_a0 []*entry.Entry) (buffer.Clearer, int, error) {
	ret := _m.Called(_a0)

	var r0 buffer.Clearer
	if rf, ok := ret.Get(0).(func([]*entry.Entry) buffer.Clearer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(buffer.Clearer)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func([]*entry.Entry) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]*entry.Entry) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadChunk provides a mock function with given fields: _a0
func (_m *Buffer) ReadChunk(_a0 context.Context) ([]*entry.Entry, buffer.Clearer, error) {
	ret := _m.Called(_a0)

	var r0 []*entry.Entry
	if rf, ok := ret.Get(0).(func(context.Context) []*entry.Entry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entry.Entry)
		}
	}

	var r1 buffer.Clearer
	if rf, ok := ret.Get(1).(func(context.Context) buffer.Clearer); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(buffer.Clearer)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadWait provides a mock function with given fields: _a0, _a1
func (_m *Buffer) ReadWait(_a0 context.Context, _a1 []*entry.Entry) (buffer.Clearer, int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 buffer.Clearer
	if rf, ok := ret.Get(0).(func(context.Context, []*entry.Entry) buffer.Clearer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(buffer.Clearer)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, []*entry.Entry) int); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []*entry.Entry) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetMaxChunkDelay provides a mock function with given fields: _a0
func (_m *Buffer) SetMaxChunkDelay(_a0 time.Duration) {
	_m.Called(_a0)
}

// SetMaxChunkSize provides a mock function with given fields: _a0
func (_m *Buffer) SetMaxChunkSize(_a0 uint) {
	_m.Called(_a0)
}
